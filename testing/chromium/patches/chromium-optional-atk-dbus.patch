diff --git a/build/config/ui.gni b/build/config/ui.gni
index 83ec3d7..1e880ad 100644
--- a/build/config/ui.gni
+++ b/build/config/ui.gni
@@ -41,8 +41,10 @@ declare_args() {
 
 assert(!use_glib || (is_linux && !is_chromecast))
 
-use_atk = is_linux && !is_chromecast && use_glib &&
-          current_toolchain == default_toolchain
+declare_args() {
+  use_atk = is_linux && !is_chromecast && use_glib &&
+            current_toolchain == default_toolchain
+}
 
 # Whether using Xvfb to provide a display server for a test might be
 # necessary.
diff --git a/chrome/browser/chrome_browser_main_linux.cc b/chrome/browser/chrome_browser_main_linux.cc
index 4f2791c..57502f8 100644
--- a/chrome/browser/chrome_browser_main_linux.cc
+++ b/chrome/browser/chrome_browser_main_linux.cc
@@ -60,11 +60,11 @@ void ChromeBrowserMainPartsLinux::PostCreateMainMessageLoop() {
 #if BUILDFLAG(IS_CHROMEOS)
   // No-op: Ash and Lacros Bluetooth DBusManager initialization depend on
   // FeatureList, and is done elsewhere.
+#elif defined(USE_DBUS)
+  bluez::BluezDBusManager::Initialize(nullptr /* system_bus */);
 #endif  // BUILDFLAG(IS_CHROMEOS)
 
 #if !BUILDFLAG(IS_CHROMEOS)
-  bluez::BluezDBusManager::Initialize(nullptr /* system_bus */);
-
   // Set up crypt config. This needs to be done before anything starts the
   // network service, as the raw encryption key needs to be shared with the
   // network service for encrypted cookie storage.
@@ -125,7 +125,7 @@ void ChromeBrowserMainPartsLinux::PostBrowserStart() {
 void ChromeBrowserMainPartsLinux::PostDestroyThreads() {
 #if BUILDFLAG(IS_CHROMEOS)
   // No-op; per PostBrowserStart() comment, this is done elsewhere.
-#else
+#elif defined(USE_DBUS)
   bluez::BluezDBusManager::Shutdown();
   bluez::BluezDBusThreadManager::Shutdown();
 #endif  // BUILDFLAG(IS_CHROMEOS)
diff --git a/chrome/browser/metrics/bluetooth_available_utility.cc b/chrome/browser/metrics/bluetooth_available_utility.cc
index 2163c1d..b2c4a38 100644
--- a/chrome/browser/metrics/bluetooth_available_utility.cc
+++ b/chrome/browser/metrics/bluetooth_available_utility.cc
@@ -13,11 +13,11 @@
 #include "device/bluetooth/bluetooth_adapter.h"
 #include "device/bluetooth/bluetooth_adapter_factory.h"
 
-#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+#if (BUILDFLAG(IS_LINUX) && defined(USE_DBUS)) || BUILDFLAG(IS_CHROMEOS)
 #include "device/bluetooth/dbus/bluez_dbus_manager.h"
 #include "device/bluetooth/floss/floss_dbus_manager.h"
 #include "device/bluetooth/floss/floss_features.h"
-#endif  // BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+#endif  // (BUILDFLAG(IS_LINUX) && defined(USE_DBUS)) || BUILDFLAG(IS_CHROMEOS)
 
 namespace bluetooth_utility {
 
@@ -65,7 +65,7 @@ void ReportBluetoothAvailability() {
     return;
   }
 
-#if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+#if (BUILDFLAG(IS_LINUX) && defined(USE_DBUS)) || BUILDFLAG(IS_CHROMEOS)
   bool is_initialized;
 
   if (base::FeatureList::IsEnabled(floss::features::kFlossEnabled)) {
@@ -81,7 +81,7 @@ void ReportBluetoothAvailability() {
   // startup.
   if (!is_initialized)
     return;
-#endif  // BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
+#endif  // (BUILDFLAG(IS_LINUX) && defined(USE_DBUS)) || BUILDFLAG(IS_CHROMEOS)
 
   if (!device::BluetoothAdapterFactory::Get()->IsBluetoothSupported()) {
     ReportAvailability(BLUETOOTH_NOT_SUPPORTED);
diff --git a/chrome/browser/platform_util_linux.cc b/chrome/browser/platform_util_linux.cc
index a17fd8e..d783e15 100644
--- a/chrome/browser/platform_util_linux.cc
+++ b/chrome/browser/platform_util_linux.cc
@@ -27,11 +27,15 @@
 // complain as Chromecast doesn't use (or depend on) //components/dbus.
 // TODO(crbug.com/1215474): Eliminate //chrome being visible in the GN structure
 // on Chromecast and remove the nogncheck below.
+#if defined(USE_DBUS)
 #include "components/dbus/thread_linux/dbus_thread_linux.h"  // nogncheck
+#endif
 #include "content/public/browser/browser_thread.h"
+#if defined(USE_DBUS)
 #include "dbus/bus.h"
 #include "dbus/message.h"
 #include "dbus/object_proxy.h"
+#endif
 #include "third_party/abseil-cpp/absl/types/optional.h"
 #include "url/gurl.h"
 
@@ -41,6 +45,7 @@ namespace platform_util {
 
 namespace {
 
+#if defined(USE_DBUS)
 const char kMethodListActivatableNames[] = "ListActivatableNames";
 const char kMethodNameHasOwner[] = "NameHasOwner";
 
@@ -284,6 +289,7 @@ class ShowItemHelper {
   base::CallbackListSubscription browser_shutdown_subscription_;
   base::WeakPtrFactory<ShowItemHelper> weak_ptr_factory_{this};
 };
+#endif
 
 void RunCommand(const std::string& command,
                 const base::FilePath& working_directory,
@@ -350,8 +356,10 @@ void PlatformOpenVerifiedItem(const base::FilePath& path, OpenItemType type) {
 }  // namespace internal
 
 void ShowItemInFolder(Profile* profile, const base::FilePath& full_path) {
+#if defined(USE_DBUS)
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
   ShowItemHelper::GetInstance().ShowItemInFolder(profile, full_path);
+#endif
 }
 
 void OpenExternal(Profile* profile, const GURL& url) {
diff --git a/device/bluetooth/bluetooth_adapter_factory.cc b/device/bluetooth/bluetooth_adapter_factory.cc
index 3526f17..ac4725a 100644
--- a/device/bluetooth/bluetooth_adapter_factory.cc
+++ b/device/bluetooth/bluetooth_adapter_factory.cc
@@ -43,7 +43,7 @@ bool BluetoothAdapterFactory::IsBluetoothSupported() {
   // instance even on platforms that would otherwise not support it.
   if (Get()->adapter_)
     return true;
-#if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_WIN) || BUILDFLAG(IS_LINUX) || \
+#if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_WIN) || (BUILDFLAG(IS_LINUX) && defined(USE_DBUS)) || \
     BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_MAC)
   return true;
 #else
@@ -56,7 +56,7 @@ bool BluetoothAdapterFactory::IsLowEnergySupported() {
     return values_for_testing_->GetLESupported();
   }
 
-#if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_CHROMEOS) || BUILDFLAG(IS_LINUX) || \
+#if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_CHROMEOS) || (BUILDFLAG(IS_LINUX) && defined(USE_DBUS)) || \
     BUILDFLAG(IS_MAC)
   return true;
 #elif BUILDFLAG(IS_WIN)
diff --git a/extensions/browser/api/bluetooth_low_energy/bluetooth_low_energy_api.cc b/extensions/browser/api/bluetooth_low_energy/bluetooth_low_energy_api.cc
index 7d48f41..870a49f 100644
--- a/extensions/browser/api/bluetooth_low_energy/bluetooth_low_energy_api.cc
+++ b/extensions/browser/api/bluetooth_low_energy/bluetooth_low_energy_api.cc
@@ -1338,7 +1338,7 @@ void BluetoothLowEnergyCreateServiceFunction::DoWork() {
 // TODO: Ideally this should be handled by our feature system, so that this
 // code doesn't even compile on OSes it isn't being used on, but currently this
 // is not possible.
-#if !BUILDFLAG(IS_WIN)
+#if !BUILDFLAG(IS_WIN) && (!BUILDFLAG(IS_LINUX) || defined(USE_DBUS))
   base::WeakPtr<device::BluetoothLocalGattService> service =
       device::BluetoothLocalGattService::Create(
           event_router_->adapter(),
@@ -1367,6 +1367,7 @@ bool BluetoothLowEnergyCreateCharacteristicFunction::ParseParams() {
 }
 
 void BluetoothLowEnergyCreateCharacteristicFunction::DoWork() {
+#if !BUILDFLAG(IS_LINUX) || defined(USE_DBUS)
   device::BluetoothLocalGattService* service =
       event_router_->adapter()->GetGattService(params_->service_id);
   if (!service) {
@@ -1387,6 +1388,9 @@ void BluetoothLowEnergyCreateCharacteristicFunction::DoWork() {
 
   Respond(ArgumentList(apibtle::CreateCharacteristic::Results::Create(
       characteristic->GetIdentifier())));
+#else
+  Respond(Error(kErrorPlatformNotSupported));
+#endif
 }
 
 // createDescriptor:
@@ -1403,6 +1407,7 @@ bool BluetoothLowEnergyCreateDescriptorFunction::ParseParams() {
 }
 
 void BluetoothLowEnergyCreateDescriptorFunction::DoWork() {
+#if !BUILDFLAG(IS_LINUX) || defined(USE_DBUS)
   device::BluetoothLocalGattCharacteristic* characteristic =
       event_router_->GetLocalCharacteristic(params_->characteristic_id);
   if (!characteristic) {
@@ -1418,6 +1423,9 @@ void BluetoothLowEnergyCreateDescriptorFunction::DoWork() {
 
   Respond(ArgumentList(
       apibtle::CreateDescriptor::Results::Create(descriptor->GetIdentifier())));
+#else
+  Respond(Error(kErrorPlatformNotSupported));
+#endif
 }
 
 // registerService:
diff --git a/services/device/wake_lock/power_save_blocker/BUILD.gn b/services/device/wake_lock/power_save_blocker/BUILD.gn
index 1637134..059e94a 100644
--- a/services/device/wake_lock/power_save_blocker/BUILD.gn
+++ b/services/device/wake_lock/power_save_blocker/BUILD.gn
@@ -86,6 +86,9 @@ if (is_android) {
     visibility = [ ":power_save_blocker" ]
     sources = java_sources_needing_jni
   }
+  if (!is_chromeos && use_x11 && !use_dbus) {
+    sources += [ "power_save_blocker_ozone.cc" ]
+  }
 
   android_library("java") {
     # Conceptually, this should be visible only to //services/device:java.
diff --git a/ui/shell_dialogs/BUILD.gn b/ui/shell_dialogs/BUILD.gn
index e1b3041..762dcf6 100644
--- a/ui/shell_dialogs/BUILD.gn
+++ b/ui/shell_dialogs/BUILD.gn
@@ -49,15 +49,9 @@ component("shell_dialogs") {
       "select_file_dialog_linux.h",
       "select_file_dialog_linux_kde.cc",
       "select_file_dialog_linux_kde.h",
-      "select_file_dialog_linux_portal.cc",
-      "select_file_dialog_linux_portal.h",
       "shell_dialog_linux.cc",
       "shell_dialog_linux.h",
     ]
-    deps += [
-      "//components/dbus/thread_linux",
-      "//dbus",
-    ]
   }
 
   if (is_mac) {
diff --git a/ui/shell_dialogs/shell_dialog_linux.cc b/ui/shell_dialogs/shell_dialog_linux.cc
index 0f5fa2e..a15ead1 100644
--- a/ui/shell_dialogs/shell_dialog_linux.cc
+++ b/ui/shell_dialogs/shell_dialog_linux.cc
@@ -10,14 +10,20 @@
 #include "build/chromeos_buildflags.h"
 #include "ui/shell_dialogs/select_file_dialog_linux.h"
 #include "ui/shell_dialogs/select_file_dialog_linux_kde.h"
+#if defined(USE_DBUS)
 #include "ui/shell_dialogs/select_file_dialog_linux_portal.h"
+#endif
 #include "ui/shell_dialogs/select_file_policy.h"
 
 namespace {
 
 ui::ShellDialogLinux* g_shell_dialog_linux = nullptr;
 
-enum FileDialogChoice { kUnknown, kToolkit, kKde, kPortal };
+enum FileDialogChoice { kUnknown, kToolkit, kKde,
+#if defined(USE_DBUS)
+  kPortal
+#endif
+};
 
 FileDialogChoice dialog_choice_ = kUnknown;
 
@@ -33,7 +39,9 @@ namespace ui {
 ShellDialogLinux::ShellDialogLinux() = default;
 
 ShellDialogLinux::~ShellDialogLinux() {
+#if defined(USE_DBUS)
   SelectFileDialogLinuxPortal::DestroyPortalConnection();
+#endif
 }
 
 void ShellDialogLinux::SetInstance(ShellDialogLinux* instance) {
@@ -45,7 +53,9 @@ const ShellDialogLinux* ShellDialogLinux::instance() {
 }
 
 void ShellDialogLinux::Initialize() {
+#if defined(USE_DBUS)
   SelectFileDialogLinuxPortal::StartAvailabilityTestInBackground();
+#endif
 }
 
 SelectFileDialog* CreateSelectFileDialog(
@@ -55,12 +65,14 @@ SelectFileDialog* CreateSelectFileDialog(
     // Start out assuming we are going to use dialogs from the toolkit.
     dialog_choice_ = kToolkit;
 
+#if defined(USE_DBUS)
     // Check to see if the portal is available.
     if (SelectFileDialogLinuxPortal::IsPortalAvailable()) {
       dialog_choice_ = kPortal;
     } else {
       // Make sure to kill the portal connection.
       SelectFileDialogLinuxPortal::DestroyPortalConnection();
+#endif
 
       // Check to see if KDE is the desktop environment.
       std::unique_ptr<base::Environment> env(base::Environment::Create());
@@ -78,7 +90,9 @@ SelectFileDialog* CreateSelectFileDialog(
           }
         }
       }
+#if defined(USE_DBUS)
     }
+#endif
   }
 
   const ui::ShellDialogLinux* shell_dialogs = ui::ShellDialogLinux::instance();
@@ -87,8 +101,10 @@ SelectFileDialog* CreateSelectFileDialog(
       if (!shell_dialogs)
         break;
       return shell_dialogs->CreateSelectFileDialog(listener, std::move(policy));
+#if defined(USE_DBUS)
     case kPortal:
       return new SelectFileDialogLinuxPortal(listener, std::move(policy));
+#endif
     case kKde: {
       std::unique_ptr<base::Environment> env(base::Environment::Create());
       base::nix::DesktopEnvironment desktop =
