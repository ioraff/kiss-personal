diff --git a/src/crypto/crypto_cipher.cc b/src/crypto/crypto_cipher.cc
index 6c663a2b21..c393ca5e02 100644
--- a/src/crypto/crypto_cipher.cc
+++ b/src/crypto/crypto_cipher.cc
@@ -28,7 +28,7 @@ bool IsSupportedAuthenticatedMode(const EVP_CIPHER* cipher) {
   switch (EVP_CIPHER_mode(cipher)) {
   case EVP_CIPH_CCM_MODE:
   case EVP_CIPH_GCM_MODE:
-#ifndef OPENSSL_NO_OCB
+#if !( defined(OPENSSL_NO_OCB) || defined(LIBRESSL_VERSION_NUMBER) )
   case EVP_CIPH_OCB_MODE:
 #endif
     return true;
@@ -80,7 +80,9 @@ void GetCipherInfo(const FunctionCallbackInfo<Value>& args) {
     case EVP_CIPH_CTR_MODE: mode_label = "ctr"; break;
     case EVP_CIPH_ECB_MODE: mode_label = "ecb"; break;
     case EVP_CIPH_GCM_MODE: mode_label = "gcm"; break;
+#if !( defined(OPENSSL_NO_OCB) || defined(LIBRESSL_VERSION_NUMBER) )
     case EVP_CIPH_OCB_MODE: mode_label = "ocb"; break;
+#endif
     case EVP_CIPH_OFB_MODE: mode_label = "ofb"; break;
     case EVP_CIPH_WRAP_MODE: mode_label = "wrap"; break;
     case EVP_CIPH_XTS_MODE: mode_label = "xts"; break;
@@ -120,6 +122,7 @@ void GetCipherInfo(const FunctionCallbackInfo<Value>& args) {
           break;
         case EVP_CIPH_GCM_MODE:
           // Fall through
+#if !( defined(OPENSSL_NO_OCB) || defined(LIBRESSL_VERSION_NUMBER) )
         case EVP_CIPH_OCB_MODE:
           if (!EVP_CIPHER_CTX_ctrl(
                   ctx.get(),
@@ -129,6 +132,7 @@ void GetCipherInfo(const FunctionCallbackInfo<Value>& args) {
             return;
           }
           break;
+#endif
         default:
           if (check_len != iv_length)
             return;
diff --git a/src/crypto/crypto_common.cc b/src/crypto/crypto_common.cc
index 3341859e04..e627a66909 100644
--- a/src/crypto/crypto_common.cc
+++ b/src/crypto/crypto_common.cc
@@ -138,12 +138,17 @@ long VerifyPeerCertificate(  // NOLINT(runtime/int)
     X509_free(peer_cert);
     err = SSL_get_verify_result(ssl.get());
   } else {
+#ifndef OPENSSL_NO_PSK
     const SSL_CIPHER* curr_cipher = SSL_get_current_cipher(ssl.get());
+#endif
     const SSL_SESSION* sess = SSL_get_session(ssl.get());
     // Allow no-cert for PSK authentication in TLS1.2 and lower.
     // In TLS1.3 check that session was reused because TLS1.3 PSK
     // looks like session resumption.
-    if (SSL_CIPHER_get_auth_nid(curr_cipher) == NID_auth_psk ||
+    if (
+#ifndef OPENSSL_NO_PSK
+        SSL_CIPHER_get_auth_nid(curr_cipher) == NID_auth_psk ||
+#endif
         (SSL_SESSION_get_protocol_version(sess) == TLS1_3_VERSION &&
          SSL_session_reused(ssl.get()))) {
       return X509_V_OK;
@@ -167,6 +172,9 @@ bool UseSNIContext(
 }
 
 const char* GetClientHelloALPN(const SSLPointer& ssl) {
+#ifdef LIBRESSL_VERSION_NUMBER
+  return nullptr;
+#else
   const unsigned char* buf;
   size_t len;
   size_t rem;
@@ -183,9 +191,13 @@ const char* GetClientHelloALPN(const SSLPointer& ssl) {
   len = (buf[0] << 8) | buf[1];
   if (len + 2 != rem) return nullptr;
   return reinterpret_cast<const char*>(buf + 3);
+#endif
 }
 
 const char* GetClientHelloServerName(const SSLPointer& ssl) {
+#ifdef LIBRESSL_VERSION_NUMBER
+  return nullptr;
+#else
   const unsigned char* buf;
   size_t len;
   size_t rem;
@@ -211,6 +223,7 @@ const char* GetClientHelloServerName(const SSLPointer& ssl) {
   if (len + 2 > rem)
     return nullptr;
   return reinterpret_cast<const char*>(buf + 5);
+#endif
 }
 
 const char* GetServerName(SSL* ssl) {
@@ -323,7 +336,9 @@ MaybeLocal<Value> GetCipherValue(Environment* env, const SSL_CIPHER* cipher) {
 }
 
 constexpr auto GetCipherName = GetCipherValue<SSL_CIPHER_get_name>;
+#ifndef LIBRESSL_VERSION_NUMBER
 constexpr auto GetCipherStandardName = GetCipherValue<SSL_CIPHER_standard_name>;
+#endif
 constexpr auto GetCipherVersion = GetCipherValue<SSL_CIPHER_get_version>;
 
 StackOfX509 CloneSSLCerts(X509Pointer&& cert,
@@ -1050,6 +1065,9 @@ MaybeLocal<Array> GetClientHelloCiphers(
     Environment* env,
     const SSLPointer& ssl) {
   EscapableHandleScope scope(env->isolate());
+#ifdef LIBRESSL_VERSION_NUMBER
+  return MaybeLocal<Array>();
+#else
   const unsigned char* buf;
   size_t len = SSL_client_hello_get0_ciphers(ssl.get(), &buf);
   size_t count = len / 2;
@@ -1077,10 +1095,14 @@ MaybeLocal<Array> GetClientHelloCiphers(
   }
   Local<Array> ret = Array::New(env->isolate(), ciphers.out(), count);
   return scope.Escape(ret);
+#endif
 }
 
 
 MaybeLocal<Object> GetCipherInfo(Environment* env, const SSLPointer& ssl) {
+#ifdef LIBRESSL_VERSION_NUMBER
+  return MaybeLocal<Object>();
+#else
   if (SSL_get_current_cipher(ssl.get()) == nullptr)
     return MaybeLocal<Object>();
   EscapableHandleScope scope(env->isolate());
@@ -1102,6 +1124,7 @@ MaybeLocal<Object> GetCipherInfo(Environment* env, const SSLPointer& ssl) {
   }
 
   return scope.Escape(info);
+#endif
 }
 
 MaybeLocal<Object> GetEphemeralKey(Environment* env, const SSLPointer& ssl) {
diff --git a/src/crypto/crypto_context.cc b/src/crypto/crypto_context.cc
index e2291f72b6..8d9157f14b 100644
--- a/src/crypto/crypto_context.cc
+++ b/src/crypto/crypto_context.cc
@@ -614,8 +614,10 @@ void SecureContext::SetSigalgs(const FunctionCallbackInfo<Value>& args) {
 
   const Utf8Value sigalgs(env->isolate(), args[0]);
 
+#ifndef LIBRESSL_VERSION_NUMBER
   if (!SSL_CTX_set1_sigalgs_list(sc->ctx_.get(), *sigalgs))
     return ThrowCryptoError(env, ERR_get_error());
+#endif
 }
 
 #ifndef OPENSSL_NO_ENGINE
diff --git a/src/crypto/crypto_ec.cc b/src/crypto/crypto_ec.cc
index e6a90200a4..982176d94c 100644
--- a/src/crypto/crypto_ec.cc
+++ b/src/crypto/crypto_ec.cc
@@ -521,7 +521,11 @@ bool ECDHBitsTraits::DeriveBits(Environment* env,
       break;
     }
     default: {
+#ifdef LIBRESSL_VERSION_NUMBER
+      EC_KEY* private_key;
+#else
       const EC_KEY* private_key;
+#endif
       {
         Mutex::ScopedLock priv_lock(*m_privkey.mutex());
         private_key = EVP_PKEY_get0_EC_KEY(m_privkey.get());
@@ -645,10 +649,14 @@ WebCryptoKeyExportStatus EC_Raw_Export(
     export_fn fn = nullptr;
     switch (key_data->GetKeyType()) {
       case kKeyTypePrivate:
+#ifndef LIBRESSL_VERSION_NUMBER
         fn = EVP_PKEY_get_raw_private_key;
+#endif
         break;
       case kKeyTypePublic:
+#ifndef LIBRESSL_VERSION_NUMBER
         fn = EVP_PKEY_get_raw_public_key;
+#endif
         break;
       case kKeyTypeSecret:
         UNREACHABLE();
@@ -837,6 +845,9 @@ Maybe<bool> ExportJWKEdKey(
     return Nothing<bool>();
   }
 
+#ifdef LIBRESSL_VERSION_NUMBER
+  return Nothing<bool>();
+#else
   size_t len = 0;
   Local<Value> encoded;
   Local<Value> error;
@@ -869,7 +880,7 @@ Maybe<bool> ExportJWKEdKey(
       env->isolate()->ThrowException(error);
     return Nothing<bool>();
   }
-
+#endif
   if (target->Set(
           env->context(),
           env->jwk_kty_string(),
diff --git a/src/crypto/crypto_hash.cc b/src/crypto/crypto_hash.cc
index 24dc436d24..a84388ec39 100644
--- a/src/crypto/crypto_hash.cc
+++ b/src/crypto/crypto_hash.cc
@@ -181,8 +181,12 @@ void Hash::HashDigest(const FunctionCallbackInfo<Value>& args) {
       // The output length should always equal hash->md_len_
       CHECK_EQ(len, hash->md_len_);
     } else {
+#ifdef LIBRESSL_VERSION_NUMBER
+      ret = 0;
+#else
       ret = EVP_DigestFinalXOF(
           hash->mdctx_.get(), digest.data<unsigned char>(), len);
+#endif
     }
 
     if (ret != 1)
@@ -290,13 +294,16 @@ bool HashTraits::DeriveBits(
     unsigned int length = params.length;
     ByteSource::Builder buf(length);
 
+#ifdef LIBRESSL_VERSION_NUMBER
+    int ret = 0;
+#else
     size_t expected = EVP_MD_CTX_size(ctx.get());
 
     int ret =
         (length == expected)
             ? EVP_DigestFinal_ex(ctx.get(), buf.data<unsigned char>(), &length)
             : EVP_DigestFinalXOF(ctx.get(), buf.data<unsigned char>(), length);
-
+#endif
     if (UNLIKELY(ret != 1))
       return false;
 
diff --git a/src/crypto/crypto_hkdf.cc b/src/crypto/crypto_hkdf.cc
index 79a84c12f5..3c8916b536 100644
--- a/src/crypto/crypto_hkdf.cc
+++ b/src/crypto/crypto_hkdf.cc
@@ -100,6 +100,9 @@ bool HKDFTraits::DeriveBits(
     Environment* env,
     const HKDFConfig& params,
     ByteSource* out) {
+#ifdef LIBRESSL_VERSION_NUMBER
+  return false;
+#else
   EVPKeyCtxPointer ctx =
       EVPKeyCtxPointer(EVP_PKEY_CTX_new_id(EVP_PKEY_HKDF, nullptr));
   if (!ctx || !EVP_PKEY_derive_init(ctx.get()) ||
@@ -124,6 +127,7 @@ bool HKDFTraits::DeriveBits(
 
   *out = std::move(buf).release();
   return true;
+#endif
 }
 
 void HKDFConfig::MemoryInfo(MemoryTracker* tracker) const {
diff --git a/src/crypto/crypto_keys.cc b/src/crypto/crypto_keys.cc
index ba37f24c48..fb91e787d6 100644
--- a/src/crypto/crypto_keys.cc
+++ b/src/crypto/crypto_keys.cc
@@ -94,7 +94,12 @@ ParseKeyResult TryParsePublicKey(
   // OpenSSL might modify the pointer, so we need to make a copy before parsing.
   const unsigned char* p = der_data;
   pkey->reset(parse(&p, der_len));
+#ifdef LIBRESSL_VERSION_NUMBER
+  OPENSSL_cleanse(der_data, der_len);
+  OPENSSL_free(der_data);
+#else
   OPENSSL_clear_free(der_data, der_len);
+#endif
 
   return *pkey ? ParseKeyResult::kParseKeyOk :
                  ParseKeyResult::kParseKeyFailed;
@@ -597,15 +602,23 @@ void ManagedEVPPKey::MemoryInfo(MemoryTracker* tracker) const {
 }
 
 size_t ManagedEVPPKey::size_of_private_key() const {
+#ifdef LIBRESSL_VERSION_NUMBER
+  return 0;
+#else
   size_t len = 0;
   return (pkey_ && EVP_PKEY_get_raw_private_key(
       pkey_.get(), nullptr, &len) == 1) ? len : 0;
+#endif
 }
 
 size_t ManagedEVPPKey::size_of_public_key() const {
+#ifdef LIBRESSL_VERSION_NUMBER
+  return 0;
+#else
   size_t len = 0;
   return (pkey_ && EVP_PKEY_get_raw_public_key(
       pkey_.get(), nullptr, &len) == 1) ? len : 0;
+#endif
 }
 
 // This maps true to Just<bool>(true) and false to Nothing<bool>().
@@ -1104,9 +1117,12 @@ void KeyObjectHandle::InitEDRaw(const FunctionCallbackInfo<Value>& args) {
   Utf8Value name(env->isolate(), args[0]);
 
   ArrayBufferOrViewContents<unsigned char> key_data(args[1]);
-  KeyType type = static_cast<KeyType>(args[2].As<Int32>()->Value());
 
   MarkPopErrorOnReturn mark_pop_error_on_return;
+#ifdef LIBRESSL_VERSION_NUMBER
+  return args.GetReturnValue().Set(false);
+#else
+  KeyType type = static_cast<KeyType>(args[2].As<Int32>()->Value());
 
   typedef EVP_PKEY* (*new_key_fn)(int, ENGINE*, const unsigned char*, size_t);
   new_key_fn fn = type == kKeyTypePrivate
@@ -1135,6 +1151,7 @@ void KeyObjectHandle::InitEDRaw(const FunctionCallbackInfo<Value>& args) {
   }
 
   args.GetReturnValue().Set(true);
+#endif
 }
 
 void KeyObjectHandle::Equals(const FunctionCallbackInfo<Value>& args) {
diff --git a/src/crypto/crypto_random.cc b/src/crypto/crypto_random.cc
index d0736a9cf1..528064d07b 100644
--- a/src/crypto/crypto_random.cc
+++ b/src/crypto/crypto_random.cc
@@ -147,7 +147,11 @@ Maybe<bool> RandomPrimeTraits::AdditionalConfig(
 
   params->bits = bits;
   params->safe = safe;
+#ifdef LIBRESSL_VERSION_NUMBER
+  params->prime.reset(BN_new());
+#else
   params->prime.reset(BN_secure_new());
+#endif
   if (!params->prime) {
     THROW_ERR_CRYPTO_OPERATION_FAILED(env, "could not generate prime");
     return Nothing<bool>();
diff --git a/src/crypto/crypto_rsa.cc b/src/crypto/crypto_rsa.cc
index 57cec1a8fd..3a370a6024 100644
--- a/src/crypto/crypto_rsa.cc
+++ b/src/crypto/crypto_rsa.cc
@@ -621,10 +621,14 @@ Maybe<bool> GetRsaKeyDetail(
       }
 
       if (params->saltLength != nullptr) {
+#ifdef LIBRESSL_VERSION_NUMBER
+        return Nothing<bool>();
+#else
         if (ASN1_INTEGER_get_int64(&salt_length, params->saltLength) != 1) {
           ThrowCryptoError(env, ERR_get_error(), "ASN1_INTEGER_get_in64 error");
           return Nothing<bool>();
         }
+#endif
       }
 
       if (target
diff --git a/src/crypto/crypto_scrypt.cc b/src/crypto/crypto_scrypt.cc
index 88d355446c..749aeb2ec6 100644
--- a/src/crypto/crypto_scrypt.cc
+++ b/src/crypto/crypto_scrypt.cc
@@ -18,7 +18,7 @@ using v8::Uint32;
 using v8::Value;
 
 namespace crypto {
-#ifndef OPENSSL_NO_SCRYPT
+#if !( defined(OPENSSL_NO_SCRYPT) || defined(LIBRESSL_VERSION_NUMBER) )
 
 ScryptConfig::ScryptConfig(ScryptConfig&& other) noexcept
   : mode(other.mode),
diff --git a/src/crypto/crypto_scrypt.h b/src/crypto/crypto_scrypt.h
index 3d185637f4..b0cea68205 100644
--- a/src/crypto/crypto_scrypt.h
+++ b/src/crypto/crypto_scrypt.h
@@ -10,7 +10,7 @@
 
 namespace node {
 namespace crypto {
-#ifndef OPENSSL_NO_SCRYPT
+#if !defined(OPENSSL_NO_SCRYPT) || defined(LIBRESSL_VERSION_NUMBER)
 
 // Scrypt is a password-based key derivation algorithm
 // defined in https://tools.ietf.org/html/rfc7914
diff --git a/src/crypto/crypto_tls.cc b/src/crypto/crypto_tls.cc
index a192956f0f..ed16fc4c1d 100644
--- a/src/crypto/crypto_tls.cc
+++ b/src/crypto/crypto_tls.cc
@@ -428,7 +428,11 @@ void TLSWrap::InitSSL() {
 
   ConfigureSecureContext(sc_.get());
 
+#ifdef LIBRESSL_VERSION_NUMBER
+/* FIXME: cert callback not implemented in libressl */
+#else
   SSL_set_cert_cb(ssl_.get(), SSLCertCallback, this);
+#endif
 
   if (is_server()) {
     SSL_set_accept_state(ssl_.get());
@@ -1310,6 +1314,9 @@ int TLSWrap::SelectSNIContextCallback(SSL* s, int* ad, void* arg) {
 }
 
 int TLSWrap::SetCACerts(SecureContext* sc) {
+#ifdef LIBRESSL_VERSION_NUMBER
+  return 0;
+#else
   int err = SSL_set1_verify_cert_store(ssl_.get(),
                                        SSL_CTX_get_cert_store(sc->ctx().get()));
   if (err != 1)
@@ -1321,6 +1328,7 @@ int TLSWrap::SetCACerts(SecureContext* sc) {
   // NOTE: `SSL_set_client_CA_list` takes the ownership of `list`
   SSL_set_client_CA_list(ssl_.get(), list);
   return 1;
+#endif
 }
 
 #ifndef OPENSSL_NO_PSK
@@ -1767,9 +1775,13 @@ void TLSWrap::GetSharedSigalgs(const FunctionCallbackInfo<Value>& args) {
   TLSWrap* w;
   ASSIGN_OR_RETURN_UNWRAP(&w, args.Holder());
 
+#ifdef LIBRESSL_VERSION_NUMBER
+  int nsig = 0;
+#else
   SSL* ssl = w->ssl_.get();
   int nsig = SSL_get_shared_sigalgs(ssl, 0, nullptr, nullptr, nullptr, nullptr,
                                     nullptr);
+#endif
   MaybeStackBuffer<Local<Value>, 16> ret_arr(nsig);
 
   for (int i = 0; i < nsig; i++) {
@@ -1777,8 +1789,10 @@ void TLSWrap::GetSharedSigalgs(const FunctionCallbackInfo<Value>& args) {
     int sign_nid;
     std::string sig_with_md;
 
+#ifndef LIBRESSL_VERSION_NUMBER
     SSL_get_shared_sigalgs(ssl, i, &sign_nid, &hash_nid, nullptr, nullptr,
                            nullptr);
+#endif
 
     switch (sign_nid) {
       case EVP_PKEY_RSA:
@@ -1808,7 +1822,7 @@ void TLSWrap::GetSharedSigalgs(const FunctionCallbackInfo<Value>& args) {
       case NID_id_GostR3410_2001:
         sig_with_md = "gost2001+";
         break;
-
+#ifndef LIBRESSL_VERSION_NUMBER
       case NID_id_GostR3410_2012_256:
         sig_with_md = "gost2012_256+";
         break;
@@ -1816,6 +1830,7 @@ void TLSWrap::GetSharedSigalgs(const FunctionCallbackInfo<Value>& args) {
       case NID_id_GostR3410_2012_512:
         sig_with_md = "gost2012_512+";
         break;
+#endif  // !LIBRESSL_VERSION_NUMBER
 #endif  // !OPENSSL_NO_GOST
       default:
         const char* sn = OBJ_nid2sn(sign_nid);
@@ -1899,6 +1914,9 @@ void TLSWrap::Renegotiate(const FunctionCallbackInfo<Value>& args) {
 }
 
 void TLSWrap::GetTLSTicket(const FunctionCallbackInfo<Value>& args) {
+#ifdef LIBRESSL_VERSION_NUMBER
+  return;
+#else
   TLSWrap* w;
   ASSIGN_OR_RETURN_UNWRAP(&w, args.Holder());
   Environment* env = w->env();
@@ -1916,6 +1934,7 @@ void TLSWrap::GetTLSTicket(const FunctionCallbackInfo<Value>& args) {
         Buffer::Copy(env, reinterpret_cast<const char*>(ticket), length)
             .FromMaybe(Local<Object>()));
   }
+#endif
 }
 
 void TLSWrap::NewSessionDone(const FunctionCallbackInfo<Value>& args) {
diff --git a/src/crypto/crypto_util.cc b/src/crypto/crypto_util.cc
index 5d8f0bbe8e..863c4b62d2 100644
--- a/src/crypto/crypto_util.cc
+++ b/src/crypto/crypto_util.cc
@@ -142,7 +142,7 @@ static Mutex fips_mutex;
 void InitCryptoOnce() {
   Mutex::ScopedLock lock(per_process::cli_options_mutex);
   Mutex::ScopedLock fips_lock(fips_mutex);
-#ifndef OPENSSL_IS_BORINGSSL
+#if !( defined(OPENSSL_IS_BORINGSSL) || defined(LIBRESSL_VERSION_NUMBER) )
   OPENSSL_INIT_SETTINGS* settings = OPENSSL_INIT_new();
 
 #if OPENSSL_VERSION_MAJOR < 3
@@ -324,12 +324,22 @@ ByteSource::ByteSource(ByteSource&& other) noexcept
 }
 
 ByteSource::~ByteSource() {
+#ifdef LIBRESSL_VERSION_NUMBER
+  OPENSSL_cleanse(allocated_data_, size_);
+  OPENSSL_free(allocated_data_);
+#else
   OPENSSL_clear_free(allocated_data_, size_);
+#endif
 }
 
 ByteSource& ByteSource::operator=(ByteSource&& other) noexcept {
   if (&other != this) {
+#ifdef LIBRESSL_VERSION_NUMBER
+    OPENSSL_cleanse(allocated_data_, size_);
+    OPENSSL_free(allocated_data_);
+#else
     OPENSSL_clear_free(allocated_data_, size_);
+#endif
     data_ = other.data_;
     allocated_data_ = other.allocated_data_;
     other.allocated_data_ = nullptr;
@@ -346,7 +356,12 @@ std::unique_ptr<BackingStore> ByteSource::ReleaseToBackingStore() {
       allocated_data_,
       size(),
       [](void* data, size_t length, void* deleter_data) {
+#ifdef LIBRESSL_VERSION_NUMBER
+        OPENSSL_cleanse(deleter_data, length);
+        OPENSSL_free(deleter_data);
+#else
         OPENSSL_clear_free(deleter_data, length);
+#endif
       }, allocated_data_);
   CHECK(ptr);
   allocated_data_ = nullptr;
@@ -488,6 +503,42 @@ Maybe<bool> Decorate(Environment* env, Local<Object> obj,
         c = ToUpper(c);
     }
 
+#ifdef LIBRESSL_VERSION_NUMBER
+#define OSSL_ERROR_CODES_MAP(V)                                               \
+    V(SYS)                                                                    \
+    V(BN)                                                                     \
+    V(RSA)                                                                    \
+    V(DH)                                                                     \
+    V(EVP)                                                                    \
+    V(BUF)                                                                    \
+    V(OBJ)                                                                    \
+    V(PEM)                                                                    \
+    V(DSA)                                                                    \
+    V(X509)                                                                   \
+    V(ASN1)                                                                   \
+    V(CONF)                                                                   \
+    V(CRYPTO)                                                                 \
+    V(EC)                                                                     \
+    V(SSL)                                                                    \
+    V(BIO)                                                                    \
+    V(PKCS7)                                                                  \
+    V(X509V3)                                                                 \
+    V(PKCS12)                                                                 \
+    V(RAND)                                                                   \
+    V(DSO)                                                                    \
+    V(ENGINE)                                                                 \
+    V(OCSP)                                                                   \
+    V(UI)                                                                     \
+    V(COMP)                                                                   \
+    V(ECDSA)                                                                  \
+    V(ECDH)                                                                   \
+    V(FIPS)                                                                   \
+    V(CMS)                                                                    \
+    V(TS)                                                                     \
+    V(HMAC)                                                                   \
+    V(CT)                                                                     \
+    V(USER)
+#else
 #define OSSL_ERROR_CODES_MAP(V)                                               \
     V(SYS)                                                                    \
     V(BN)                                                                     \
@@ -525,7 +576,8 @@ Maybe<bool> Decorate(Environment* env, Local<Object> obj,
     V(ASYNC)                                                                  \
     V(KDF)                                                                    \
     V(SM2)                                                                    \
-    V(USER)                                                                   \
+    V(USER)
+#endif
 
 #define V(name) case ERR_LIB_##name: lib = #name "_"; break;
     const char* lib = "";
@@ -683,7 +735,11 @@ void SecureBuffer(const FunctionCallbackInfo<Value>& args) {
   CHECK(args[0]->IsUint32());
   Environment* env = Environment::GetCurrent(args);
   uint32_t len = args[0].As<Uint32>()->Value();
+#ifdef LIBRESSL_VERSION_NUMBER
+  char* data = static_cast<char*>(OPENSSL_malloc(len));
+#else
   char* data = static_cast<char*>(OPENSSL_secure_malloc(len));
+#endif
   if (data == nullptr) {
     // There's no memory available for the allocation.
     // Return nothing.
@@ -695,7 +751,12 @@ void SecureBuffer(const FunctionCallbackInfo<Value>& args) {
           data,
           len,
           [](void* data, size_t len, void* deleter_data) {
+#ifdef LIBRESSL_VERSION_NUMBER
+            OPENSSL_cleanse(data, len);
+            OPENSSL_free(data);
+#else
             OPENSSL_secure_clear_free(data, len);
+#endif
           },
           data);
   Local<ArrayBuffer> buffer = ArrayBuffer::New(env->isolate(), store);
@@ -703,10 +764,12 @@ void SecureBuffer(const FunctionCallbackInfo<Value>& args) {
 }
 
 void SecureHeapUsed(const FunctionCallbackInfo<Value>& args) {
+#ifndef LIBRESSL_VERSION_NUMBER
   Environment* env = Environment::GetCurrent(args);
   if (CRYPTO_secure_malloc_initialized())
     args.GetReturnValue().Set(
         BigInt::New(env->isolate(), CRYPTO_secure_used()));
+#endif
 }
 }  // namespace
 
diff --git a/src/crypto/crypto_util.h b/src/crypto/crypto_util.h
index e5d9410039..36bc18d0b0 100644
--- a/src/crypto/crypto_util.h
+++ b/src/crypto/crypto_util.h
@@ -15,7 +15,9 @@
 #include <openssl/err.h>
 #include <openssl/evp.h>
 #include <openssl/ec.h>
-#include <openssl/kdf.h>
+#ifndef LIBRESSL_VERSION_NUMBER
+#  include <openssl/kdf.h>
+#endif
 #include <openssl/rsa.h>
 #include <openssl/dsa.h>
 #include <openssl/ssl.h>
@@ -36,6 +38,20 @@
 #include <string>
 #include <vector>
 
+#ifdef LIBRESSL_VERSION_NUMBER
+#  define OPENSSL_memdup(str, s) \
+        BUF_memdup(str, s)
+#  define EVP_F_EVP_DIGESTFINALXOF          0
+#  define EVP_MD_FLAG_XOF               0x002
+#  define EVP_PKEY_X25519  NID_X25519
+#  define EVP_PKEY_X448    NID_X448
+#  define EVP_PKEY_ED25519 NID_Ed25519
+#  define EVP_PKEY_ED448   NID_Ed448
+#  define EVP_R_NOT_XOF_OR_INVALID_LENGTH 178
+#  define NID_ED25519      NID_Ed25519
+#  define NID_ED448        NID_Ed448
+#endif
+
 namespace node {
 namespace crypto {
 // Currently known sizes of commonly used OpenSSL struct sizes.
@@ -234,7 +250,14 @@ class ByteSource {
     Builder(const Builder&) = delete;
     Builder& operator=(const Builder&) = delete;
 
-    ~Builder() { OPENSSL_clear_free(data_, size_); }
+    ~Builder() {
+#ifdef LIBRESSL_VERSION_NUMBER
+      OPENSSL_cleanse(data_, size_);
+      OPENSSL_free(data_);
+#else
+      OPENSSL_clear_free(data_, size_);
+#endif
+    }
 
     // Returns the underlying non-const pointer.
     template <typename T>
@@ -251,7 +274,12 @@ class ByteSource {
       if (resize) {
         CHECK_LE(*resize, size_);
         if (*resize == 0) {
+#ifdef LIBRESSL_VERSION_NUMBER
+          OPENSSL_cleanse(data_, size_);
+          OPENSSL_free(data_);
+#else
           OPENSSL_clear_free(data_, size_);
+#endif
           data_ = nullptr;
         }
         size_ = *resize;
diff --git a/src/node_crypto.cc b/src/node_crypto.cc
index c3f400f1ae..a18ac89423 100644
--- a/src/node_crypto.cc
+++ b/src/node_crypto.cc
@@ -59,7 +59,7 @@ namespace crypto {
   V(Verify)                                                                    \
   V(X509Certificate)
 
-#ifdef OPENSSL_NO_SCRYPT
+#if defined(OPENSSL_NO_SCRYPT) || defined(LIBRESSL_VERSION_NUMBER)
 #define SCRYPT_NAMESPACE_LIST(V)
 #else
 #define SCRYPT_NAMESPACE_LIST(V) V(ScryptJob)
